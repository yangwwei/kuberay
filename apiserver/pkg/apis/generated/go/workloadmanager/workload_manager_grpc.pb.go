// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/workload_manager.proto

package workloadmanager

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkloadManager_Submit_FullMethodName         = "/WorkloadManager/Submit"
	WorkloadManager_Describe_FullMethodName       = "/WorkloadManager/Describe"
	WorkloadManager_Status_FullMethodName         = "/WorkloadManager/Status"
	WorkloadManager_WorkloadEvents_FullMethodName = "/WorkloadManager/WorkloadEvents"
	WorkloadManager_Logs_FullMethodName           = "/WorkloadManager/Logs"
	WorkloadManager_Delete_FullMethodName         = "/WorkloadManager/Delete"
	WorkloadManager_List_FullMethodName           = "/WorkloadManager/List"
	WorkloadManager_Patch_FullMethodName          = "/WorkloadManager/Patch"
)

// WorkloadManagerClient is the client API for WorkloadManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadManagerClient interface {
	// Submit a new workload
	Submit(ctx context.Context, in *WorkloadSpec, opts ...grpc.CallOption) (*SubmitWorkloadResponse, error)
	// Describe a specific workload
	Describe(ctx context.Context, in *DescribeWorkloadRequest, opts ...grpc.CallOption) (*DescribeWorkloadResponse, error)
	// Get the status of a specific workload
	Status(ctx context.Context, in *GetWorkloadStatusRequest, opts ...grpc.CallOption) (*WorkloadStatusResponse, error)
	// Get events related to a specific workload
	WorkloadEvents(ctx context.Context, in *GetWorkloadEventsRequest, opts ...grpc.CallOption) (*GetWorkloadEventsResponse, error)
	// Get logs for a specific workload
	Logs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// Delete a specific workload
	Delete(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*OperationSummary, error)
	// List workloads in a specific queue
	List(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*ListWorkloadResponse, error)
	// Patch a workload
	Patch(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*OperationSummary, error)
}

type workloadManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadManagerClient(cc grpc.ClientConnInterface) WorkloadManagerClient {
	return &workloadManagerClient{cc}
}

func (c *workloadManagerClient) Submit(ctx context.Context, in *WorkloadSpec, opts ...grpc.CallOption) (*SubmitWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitWorkloadResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Describe(ctx context.Context, in *DescribeWorkloadRequest, opts ...grpc.CallOption) (*DescribeWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeWorkloadResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Status(ctx context.Context, in *GetWorkloadStatusRequest, opts ...grpc.CallOption) (*WorkloadStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkloadStatusResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) WorkloadEvents(ctx context.Context, in *GetWorkloadEventsRequest, opts ...grpc.CallOption) (*GetWorkloadEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkloadEventsResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_WorkloadEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Logs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_Logs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Delete(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*OperationSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationSummary)
	err := c.cc.Invoke(ctx, WorkloadManager_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) List(ctx context.Context, in *ListWorkloadRequest, opts ...grpc.CallOption) (*ListWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkloadResponse)
	err := c.cc.Invoke(ctx, WorkloadManager_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadManagerClient) Patch(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*OperationSummary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationSummary)
	err := c.cc.Invoke(ctx, WorkloadManager_Patch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadManagerServer is the server API for WorkloadManager service.
// All implementations must embed UnimplementedWorkloadManagerServer
// for forward compatibility.
type WorkloadManagerServer interface {
	// Submit a new workload
	Submit(context.Context, *WorkloadSpec) (*SubmitWorkloadResponse, error)
	// Describe a specific workload
	Describe(context.Context, *DescribeWorkloadRequest) (*DescribeWorkloadResponse, error)
	// Get the status of a specific workload
	Status(context.Context, *GetWorkloadStatusRequest) (*WorkloadStatusResponse, error)
	// Get events related to a specific workload
	WorkloadEvents(context.Context, *GetWorkloadEventsRequest) (*GetWorkloadEventsResponse, error)
	// Get logs for a specific workload
	Logs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// Delete a specific workload
	Delete(context.Context, *DeleteWorkloadRequest) (*OperationSummary, error)
	// List workloads in a specific queue
	List(context.Context, *ListWorkloadRequest) (*ListWorkloadResponse, error)
	// Patch a workload
	Patch(context.Context, *PatchWorkloadRequest) (*OperationSummary, error)
	mustEmbedUnimplementedWorkloadManagerServer()
}

// UnimplementedWorkloadManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkloadManagerServer struct{}

func (UnimplementedWorkloadManagerServer) Submit(context.Context, *WorkloadSpec) (*SubmitWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedWorkloadManagerServer) Describe(context.Context, *DescribeWorkloadRequest) (*DescribeWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedWorkloadManagerServer) Status(context.Context, *GetWorkloadStatusRequest) (*WorkloadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedWorkloadManagerServer) WorkloadEvents(context.Context, *GetWorkloadEventsRequest) (*GetWorkloadEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkloadEvents not implemented")
}
func (UnimplementedWorkloadManagerServer) Logs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedWorkloadManagerServer) Delete(context.Context, *DeleteWorkloadRequest) (*OperationSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkloadManagerServer) List(context.Context, *ListWorkloadRequest) (*ListWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkloadManagerServer) Patch(context.Context, *PatchWorkloadRequest) (*OperationSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedWorkloadManagerServer) mustEmbedUnimplementedWorkloadManagerServer() {}
func (UnimplementedWorkloadManagerServer) testEmbeddedByValue()                         {}

// UnsafeWorkloadManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadManagerServer will
// result in compilation errors.
type UnsafeWorkloadManagerServer interface {
	mustEmbedUnimplementedWorkloadManagerServer()
}

func RegisterWorkloadManagerServer(s grpc.ServiceRegistrar, srv WorkloadManagerServer) {
	// If the following call pancis, it indicates UnimplementedWorkloadManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkloadManager_ServiceDesc, srv)
}

func _WorkloadManager_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Submit(ctx, req.(*WorkloadSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Describe(ctx, req.(*DescribeWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Status(ctx, req.(*GetWorkloadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_WorkloadEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).WorkloadEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_WorkloadEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).WorkloadEvents(ctx, req.(*GetWorkloadEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Logs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Logs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Delete(ctx, req.(*DeleteWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).List(ctx, req.(*ListWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadManager_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadManagerServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadManager_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadManagerServer).Patch(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadManager_ServiceDesc is the grpc.ServiceDesc for WorkloadManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkloadManager",
	HandlerType: (*WorkloadManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _WorkloadManager_Submit_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _WorkloadManager_Describe_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _WorkloadManager_Status_Handler,
		},
		{
			MethodName: "WorkloadEvents",
			Handler:    _WorkloadManager_WorkloadEvents_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _WorkloadManager_Logs_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkloadManager_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkloadManager_List_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _WorkloadManager_Patch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workload_manager.proto",
}

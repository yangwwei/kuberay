// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/workload_agent.proto

package workloadagent

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkloadAgent_Proxy_FullMethodName        = "/WorkloadAgent/Proxy"
	WorkloadAgent_HealthyProbe_FullMethodName = "/WorkloadAgent/HealthyProbe"
)

// WorkloadAgentClient is the client API for WorkloadAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadAgentClient interface {
	Proxy(ctx context.Context, in *WorkloadCommand, opts ...grpc.CallOption) (*WorkloadCommandResponse, error)
	HealthyProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterState, error)
}

type workloadAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadAgentClient(cc grpc.ClientConnInterface) WorkloadAgentClient {
	return &workloadAgentClient{cc}
}

func (c *workloadAgentClient) Proxy(ctx context.Context, in *WorkloadCommand, opts ...grpc.CallOption) (*WorkloadCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkloadCommandResponse)
	err := c.cc.Invoke(ctx, WorkloadAgent_Proxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadAgentClient) HealthyProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterState)
	err := c.cc.Invoke(ctx, WorkloadAgent_HealthyProbe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadAgentServer is the server API for WorkloadAgent service.
// All implementations must embed UnimplementedWorkloadAgentServer
// for forward compatibility.
type WorkloadAgentServer interface {
	Proxy(context.Context, *WorkloadCommand) (*WorkloadCommandResponse, error)
	HealthyProbe(context.Context, *emptypb.Empty) (*ClusterState, error)
	mustEmbedUnimplementedWorkloadAgentServer()
}

// UnimplementedWorkloadAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkloadAgentServer struct{}

func (UnimplementedWorkloadAgentServer) Proxy(context.Context, *WorkloadCommand) (*WorkloadCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedWorkloadAgentServer) HealthyProbe(context.Context, *emptypb.Empty) (*ClusterState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthyProbe not implemented")
}
func (UnimplementedWorkloadAgentServer) mustEmbedUnimplementedWorkloadAgentServer() {}
func (UnimplementedWorkloadAgentServer) testEmbeddedByValue()                       {}

// UnsafeWorkloadAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadAgentServer will
// result in compilation errors.
type UnsafeWorkloadAgentServer interface {
	mustEmbedUnimplementedWorkloadAgentServer()
}

func RegisterWorkloadAgentServer(s grpc.ServiceRegistrar, srv WorkloadAgentServer) {
	// If the following call pancis, it indicates UnimplementedWorkloadAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkloadAgent_ServiceDesc, srv)
}

func _WorkloadAgent_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAgentServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadAgent_Proxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAgentServer).Proxy(ctx, req.(*WorkloadCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadAgent_HealthyProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAgentServer).HealthyProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkloadAgent_HealthyProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAgentServer).HealthyProbe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadAgent_ServiceDesc is the grpc.ServiceDesc for WorkloadAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkloadAgent",
	HandlerType: (*WorkloadAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proxy",
			Handler:    _WorkloadAgent_Proxy_Handler,
		},
		{
			MethodName: "HealthyProbe",
			Handler:    _WorkloadAgent_HealthyProbe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workload_agent.proto",
}
